---
import "../styles/globals.css";

export interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const {
  title,
  description = "Next-generation AI Agents platform for enterprise businesses",
  ogImage = "/og-image.jpg",
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'https://shinai.vercel.app');
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <script>
      // Update favicon color based on user's color scheme preference
      const favicon = document.querySelector('link[rel="icon"]');
      function updateFavicon() {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          document.querySelector('svg')?.classList?.add('dark-mode');
        } else {
          document.querySelector('svg')?.classList?.remove('dark-mode');
        }
      }
      // Update favicon when color scheme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateFavicon);
      // Initial update
      document.addEventListener('DOMContentLoaded', updateFavicon);
    </script>
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{title} | ShinAI</title>
    <meta name="title" content={`${title} | ShinAI`} />
    <meta name="description" content={description} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={`${title} | ShinAI`} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={`${title} | ShinAI`} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage} />
    
    <!-- Font preloads -->
    <link
      rel="preload"
      href="https://rsms.me/inter/font-files/Inter-roman.var.woff2?v=3.19"
      as="font"
      type="font/woff2"
      crossorigin
    />
    
    <!-- Preload critical assets -->
    <link rel="preload" href="/images/grid-pattern.svg" as="image" />
  </head>
  <body class="antialiased min-h-screen">
    <!-- Background elements -->
    <div class="fixed inset-0 bg-grid pointer-events-none"></div>
    <div class="fixed inset-0 bg-gradient-radial from-transparent to-background/80 pointer-events-none"></div>
    <div class="bg-glow pointer-events-none"></div>
    
    <main class="relative z-10">
      <slot />
    </main>

    <!-- Glow effect at the bottom -->
    <div class="fixed bottom-0 left-0 w-full h-1/4 pointer-events-none">
      <div class="absolute bottom-0 left-1/4 w-1/2 h-full bg-gradient-radial from-primary/20 to-transparent opacity-50 blur-3xl"></div>
    </div>

    <!-- Shader backdrop effect for modern browsers -->
    <div id="shader-backdrop" class="fixed inset-0 pointer-events-none opacity-20 mix-blend-overlay"></div>

    <script>
      // Add interactive elements
      document.addEventListener('DOMContentLoaded', () => {
        // Initialize shader effect (if supported)
        const shaderElement = document.getElementById('shader-backdrop');
        if (shaderElement && window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
          import('../lib/shaderEffect').then(module => {
            module.initShaderEffect(shaderElement);
          }).catch(() => {
            console.log('Shader effect not supported');
          });
        }
        
        // Get all elements with data-animate attribute
        const animateElements = document.querySelectorAll('[data-animate]');
        if ('IntersectionObserver' in window) {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                observer.unobserve(entry.target);
              }
            });
          }, { threshold: 0.1 });
          
          animateElements.forEach(el => observer.observe(el));
        } else {
          // Fallback for browsers that don't support IntersectionObserver
          animateElements.forEach(el => el.classList.add('animate-in'));
        }
      });
    </script>
  </body>
</html>

<style is:global>
  /* Entrance animations */
  [data-animate] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease, transform 0.8s ease;
  }
  
  [data-animate].animate-in {
    opacity: 1;
    transform: translateY(0);
  }
  
  [data-animate="fade"] {
    transform: none;
  }
  
  [data-animate="slide-up"] {
    transform: translateY(30px);
  }
  
  [data-animate="slide-down"] {
    transform: translateY(-30px);
  }
  
  [data-animate="slide-left"] {
    transform: translateX(30px);
  }
  
  [data-animate="slide-right"] {
    transform: translateX(-30px);
  }
  
  [data-animate="scale"] {
    transform: scale(0.9);
  }
  
  [data-animate="scale"].animate-in {
    transform: scale(1);
  }
  
  /* Staggered animations for child elements */
  [data-animate-children] > * {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  [data-animate-children].animate-in > * {
    opacity: 1;
    transform: translateY(0);
  }
  
  [data-animate-children].animate-in > *:nth-child(1) { transition-delay: 0.1s; }
  [data-animate-children].animate-in > *:nth-child(2) { transition-delay: 0.2s; }
  [data-animate-children].animate-in > *:nth-child(3) { transition-delay: 0.3s; }
  [data-animate-children].animate-in > *:nth-child(4) { transition-delay: 0.4s; }
  [data-animate-children].animate-in > *:nth-child(5) { transition-delay: 0.5s; }
  [data-animate-children].animate-in > *:nth-child(6) { transition-delay: 0.6s; }
</style> 

---
import MainLayout from "../layouts/MainLayout.astro";
import { HeroSection } from "../components/sections/HeroSection";
import FeaturesSection from "../components/sections/FeaturesSection";
import { AgentsShowcase } from "../components/sections/AgentsShowcase";
import { TestimonialsSection } from "../components/sections/TestimonialsSection";
import { ContactSection } from "../components/sections/ContactSection";
---

<MainLayout title="ShinAI - Orchestrating Intelligence">
  <div class="space-y-24 sm:space-y-32 md:space-y-40 lg:space-y-48 overflow-hidden">
    <!-- Hero Section -->
    <HeroSection client:load />

    <!-- Features Section -->
    <section id="features" class="container relative" data-animate="slide-up">
      <div class="absolute -top-20 -right-20 w-1/3 h-1/2 bg-primary/10 rounded-full blur-3xl opacity-50 animate-pulse-glow"></div>
      <FeaturesSection client:visible />
    </section>

    <!-- Agents Showcase Section -->
    <section id="agents" class="relative" data-animate="slide-up">
      <div class="absolute -bottom-20 -left-20 w-1/4 h-1/2 bg-accent/10 rounded-full blur-3xl opacity-50 animate-pulse-glow"></div>
      <div class="container">
        <AgentsShowcase client:visible />
      </div>
    </section>

    <!-- Testimonials Section with Split Background -->
    <section id="testimonials" class="relative py-24 clip-slant-br" data-animate>
      <div class="absolute inset-0 bg-card/30 -z-10"></div>
      <div class="absolute inset-0 bg-grid opacity-10 -z-10"></div>
      <div class="container">
        <TestimonialsSection client:visible />
      </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="container py-24" data-animate="slide-up">
      <ContactSection client:visible />
    </section>
  </div>
</MainLayout>

<script>
  // Parallax effect for background elements
  document.addEventListener('DOMContentLoaded', () => {
    if (window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
      const handleParallax = () => {
        const scrollPosition = window.scrollY;
        const parallaxElements = document.querySelectorAll('.parallax');
        
        parallaxElements.forEach(element => {
          const speed = parseFloat(element.getAttribute('data-speed') || '0.1');
          const offset = scrollPosition * speed;
          (element as HTMLElement).style.transform = `translateY(${offset}px)`;
        });
      };
      
      window.addEventListener('scroll', handleParallax);
    }
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Safe type casting
        const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
        
        if (targetId) {
          const targetElement = document.querySelector(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  });
</script> 